name: Build Embedded Application scan

on:
  push:
    branches: [ "embedded_coverity_scan" ]

env:
  COVERITY_STREAMNAME: 'Industrial-smart-filter'
  COVERITY_USERNAME: 'shreekanthb@eaton.com'
  COVERITY_PASSWORD: 'D4F4701C61E6251E7D723F619F60B9FF'
  SOLUTION_FILE_PATH: '${{ github.workspace }}/smartfilter-api/Eaton.SmartFilter.API.sln'
  filepath: '/tmp/source/license.dat'
  covanalysispath: '/tmp/source/cov-analysis-linux64-2023.12.0.sh'

jobs:
  Building_Stage:
    runs-on: windows-latest
    steps:       
      - name: Checkout
        uses: actions/checkout@v4 

      - name: Checkout
        uses: actions/checkout@v4  
        with:        
            repository: etn-ccis/edge-rtos-babelfish-v3
            path: edge-rtos-babelfish-v3
            ref: f37039b3ad84008892185725935fd9668bc9074d
            token: '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'
      
      - name: Install required S/Ws
        shell: pwsh
        run: |
          cd D:\a
          ls
          df -h 
          du -sch *
          Set-ExecutionPolicy AllSigned 
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) 
          choco --version
          choco feature enable -n allowGlobalConfirmation 
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' 
          choco install ninja gperf python dtc-msys2 wget 7zip unzip 
          md zephyrproject 
          pip3 install virtualenv 
          python -m venv zephyrproject\zephyr-v3.2.0\.venv 
          Set-ExecutionPolicy Bypass -Scope Process â€“Force 
          Invoke-Item "D:\a\zephyrproject\zephyr-v3.2.0\.venv\Scripts\activate.bat"
          pip3 install west 
          west init --mr v3.2.0 zephyrproject\zephyr-v3.2.0 
          cd zephyrproject\zephyr-v3.2.0
          Get-Location
          powershell "(Get-Service actions.runner.*).name"
          ls
          west update 
          west zephyr-export 
          pip install -r \zephyr\scripts\requirements.txt         
          pip3 install pyelftools
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.15.2/zephyr-sdk-0.15.2_windows-x86_64.zip 
          7z x zephyr-sdk-0.15.2_windows-x86_64.zip 
          Remove-Item -Path "D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2_windows-x86_64.zip"
          ls
          df -h
          du -sch *
          
          cd zephyr-sdk-0.15.2
          ls
          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-win32.zip
          7z x gcc-arm-none-eabi-10.3-2021.10-win32.zip
          ls
          Remove-Item -Path "D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2\gcc-arm-none-eabi-10.3-2021.10-win32.zip"
          ls
          df -h
          du -sch *
          
          cd gcc-arm-none-eabi-10.3-2021.10
          ls
          [System.Environment]::SetEnvironmentVariable('ZEPHYR_TOOLCHAIN_VARIANT','gnuarmemb')
          [System.Environment]::SetEnvironmentVariable('GNUARMEMB_TOOLCHAIN_PATH','D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2\gcc-arm-none-eabi-10.3-2021.10')
          [System.Environment]::SetEnvironmentVariable('ZEPHYR_SDK_INSTALL_DIR','D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2')
          [System.Environment]::SetEnvironmentVariable('ZEPHYR_BASE','D:\a\zephyrproject\zephyr-v3.2.0\zephyr')
          Get-ChildItem Env:
          
          cd D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2
          ls
          
          D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2\setup.cmd y y y      
          cmake --version
          
          move-Item -Path D:\a\smart-filter-controller-embedded\smart-filter-controller-embedded\edge-rtos-babelfish-v3 -Destination D:\a\zephyrproject
          copy-Item -Path "D:\a\smart-filter-controller-embedded\smart-filter-controller-embedded" -Destination "D:\a\zephyrproject" -Recurse
  
          cd D:\a\zephyrproject
          ls
          
          cd D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2
          ls
          Invoke-Item "D:\a\zephyrproject\zephyr-v3.2.0\zephyr-sdk-0.15.2\setup.cmd"
          
          cd D:\a\zephyrproject\smart-filter-controller-embedded
          ls
          Set-Location -Path D:\a\zephyrproject\edge-rtos-babelfish-v3
          & ./zephyr_setup_windows.bat -input 1 

          Set-Location -Path D:\a\zephyrproject\smart-filter-controller-embedded
          Invoke-Expression -Command "./cmd_build.bat"
          
          cd D:\a\zephyrproject\smart-filter-controller-embedded\build
          ls
          
          cd D:\a\zephyrproject\smart-filter-controller-embedded\build\zephyr
          ls
          
          cd D:/a/zephyrproject/smart-filter-controller-embedded/
          Compress-Archive -Path "D:/a/zephyrproject/smart-filter-controller-embedded/build" -DestinationPath "build.zip"

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
         name: artifact
         path: D:/a/zephyrproject/smart-filter-controller-embedded/build.zip

  Scanning_Stage:
    needs: Building_Stage
    runs-on: ubuntu-latest
    steps:
    
      - name: Set up apt sources & Create source code directory
        shell: bash
        run: |
          set -x
          sudo sed /etc/apt/sources.list -e "s/^# deb-src/deb-src/g" -i
          sudo apt-get update
          mkdir /tmp/source
          SOURCE_CODE_DIRECTORY="/tmp/source/smartfilter-api/"
          setupPath="/tmp/source";
          mkdir SOURCE_CODE_DIRECTORY
          echo "Grant Permission to folder Start"
          
          rm -rf SOURCE_CODE_DIRECTORY
          chmod u+w $setupPath
          echo "Setting download path to curl api"
          
          echo "Grant Permission to folder Stop"
          
          echo "Download Coverity Build Tool"
          curl -L -u $COVERITY_USERNAME:${{secrets.SF_COVERITY_KEY}}  https://coverity.eaton.com/downloadFile.htm --data-urlencode "fn=license.dat" --output $filepath
          echo "license file downloaded."
          curl -L -u $COVERITY_USERNAME:${{secrets.SF_COVERITY_KEY}} https://coverity.eaton.com/downloadFile.htm --data-urlencode "fn=cov-analysis-linux64-2023.12.0.sh" --output $covanalysispath
          echo "Download done."
          chmod 777 $covanalysispath
          cd /tmp/source
          ls -ll
       
          rm -rf  /opt/cov-analysis-linux64-2023.12.0/*
          bash $setupPath/cov-analysis-linux64-2023.12.0.sh -q   --installation.dir=/opt/cov-analysis-linux64-2023.12.0  --license.region=0    --license.agreement=agree   --license.type.choice=0 --license.cov.path=$filepath

          echo "Coverity Client installation done."
      
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: D:\a\zephyrproject\smart-filter-controller-embedded\build
      
      - name:  artifacts
        run: |
          cd D:\a\zephyrproject\smart-filter-controller-embedded\build
          ls -ll
          
      - name: Configure Coverity
        run: |
          rm -rf ${setupPath}/cov-analysis-linux64-2021.12.0.sh
          COVERITY_TOOL_HOME="/opt/cov-analysis-linux64-2021.12.0/bin"
          COVERITY_APP_SOLUTION_DIRECTORY="/opt/smartfilter-api/"
          mkdir /opt/smartfilter-api/
          chmod 777 /opt/smartfilter-api/
          rm -rf COVERITY_APP_SOLUTION_DIRECTORY/*
          $COVERITY_TOOL_HOME/cov-configure --cs # Configure Coverity
          echo "Environment is Set."
          #Coverity build
          #$COVERITY_TOOL_HOME/cov-build --dir $COVERITY_APP_SOLUTION_DIRECTORY --no-command --fs-capture-search $SOLUTION_FILE_PATH
          $COVERITY_TOOL_HOME/cov-build --dir $COVERITY_APP_SOLUTION_DIRECTORY embedded build $SOLUTION_FILE_PATH
          echo "Cov-Build Done."
          #Coverity analyze
          $COVERITY_TOOL_HOME/cov-analyze --dir $COVERITY_APP_SOLUTION_DIRECTORY --all --strip-path ${{ github.workspace }}
          echo "Cov-Analyze Done."
          #Coverity commit defects
          $COVERITY_TOOL_HOME/cov-commit-defects --verbose 5 --dir $COVERITY_APP_SOLUTION_DIRECTORY --url https://coverity.eaton.com/ --user $COVERITY_USERNAME --password ${{secrets.SF_COVERITY_KEY}} --stream $COVERITY_STREAMNAME
          echo "Completed.."



Compiler configuration.
cov-configure --config coverity_config.xml --comptype gcc --compiler arm-none-eabi-gcc --template
 
Build Command
cov-build --config coverity_config.xml --dir idir cmd_build.bat
 
Analyze Command
cov-analyze --config coverity_config.xml --dir idir --all --enable-exceptions --enable-virtual --enable-audit-mode --webapp-security --aggressiveness-level high --enable-callgraph-metrics --force -en SECURE_CODING -en HARDCODED_CREDENTIALS -en UNENCRYPTED_SENSITIVE_DATA -en USER_POINTER -en WEAK_GUARD -en WEAK_PASSWORD_HASH --enable-constraint-fpp --enable-jshint
 
Emit Command
cov-manage-emit --dir idir list > idir_all_emit.txt
 
 
Show Streams
cov-manage-im --mode streams --url " https://coverity.eaton.com/" --auth-key-file "C:\\Users\\vaibhav.kambli\\eaton\\smart-filter-controller-embedded\\auth-key.txt" --show
 
 
Upload Report
cov-commit-defects --url " https://coverity.eaton.com/" --auth-key-file "auth-key.txt" --stream "Industrial-smart-filter" --target embedded --ssl --dir idir --config coverity_config.xml

